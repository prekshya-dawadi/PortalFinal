#!/usr/bin/env node
//Default
/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("portal-final:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
//End of default

// Server-side of the socket

var socketio = require("socket.io");
var io = socketio(server);
var formatMessage = require("../utils/messages");

// While importing functions, use {}, or else it gets imported as an object
const { userJoin } = require("../utils/users");
var bot = "channel bot";

io.on("connection", (socket) => {
  socket.on("joinRoom", (Room) => {

    const user = userJoin(socket.id, 'username', Room);
    socket.join(user.room);

    console.log(user);
    console.log(bot);

    // Welcome Current User
    socket.emit("message", formatMessage(bot, "Welcome to the channel!"));

    // Broadcast when a user connects
    socket.broadcast
      .to(user.room)
      .emit("message", formatMessage(bot, `a user has joined the chat`));

    //Listen for chatMessage
    socket.on("chatMessage", (msg) => {
      io.to(user.room).emit("message", formatMessage('username', msg));
    });
    //Runs when client disconnects
    socket.on("disconnect", () => {
      io.to(user.room).emit(
        "message",
        formatMessage(bot, `A user has left the chat.`)
      );
    });
    // all the clients -> io.emit()
  });
});
